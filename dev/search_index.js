var documenterSearchIndex = {"docs":
[{"location":"man/reading/#Reading-2Bit-files-1","page":"Reading files","title":"Reading 2Bit files","text":"","category":"section"},{"location":"man/reading/#","page":"Reading files","title":"Reading files","text":"You read 2Bit files using the TwoBit.Reader type.","category":"page"},{"location":"man/reading/#","page":"Reading files","title":"Reading files","text":"TwoBit.Reader","category":"page"},{"location":"man/reading/#TwoBit.Reader","page":"Reading files","title":"TwoBit.Reader","text":"TwoBit.Reader(input::IO)\n\nCreate a data reader of the 2bit file format.\n\nArguments\n\ninput: data source\n\n\n\n\n\n","category":"type"},{"location":"man/reading/#","page":"Reading files","title":"Reading files","text":"The type wraps an IO type and supports random access to the sequence records in the file.","category":"page"},{"location":"man/reading/#","page":"Reading files","title":"Reading files","text":"reader = TwoBit.Reader(open(\"sacCer.2bit\", \"r\"))\nchrIV = reader[\"chrIV\"] # directly read chromosome 4","category":"page"},{"location":"man/reading/#","page":"Reading files","title":"Reading files","text":"If you want to know the names of the sequences available in the file, you can  use the seqnames method on the reader.","category":"page"},{"location":"man/reading/#","page":"Reading files","title":"Reading files","text":"TwoBit.seqnames(reader)","category":"page"},{"location":"man/reading/#","page":"Reading files","title":"Reading files","text":"Reading from a TwoBit.Reader will yield a TwoBit.Record type variable.","category":"page"},{"location":"man/records/#Bit-file-records-1","page":"TwoBit Records","title":"2Bit file records","text":"","category":"section"},{"location":"man/records/#","page":"TwoBit Records","title":"TwoBit Records","text":"When you read from a 2Bit file you will get a TwoBit.Record type. When you want to write a sequence to a 2Bit file you must first make a TwoBit.Record type.","category":"page"},{"location":"man/records/#","page":"TwoBit Records","title":"TwoBit Records","text":"TwoBit.Record","category":"page"},{"location":"man/records/#TwoBit.Record","page":"TwoBit Records","title":"TwoBit.Record","text":"TwoBit.Record()\n\nCreate an unfilled 2bit record.\n\n\n\n\n\nRecord(name::AbstractString, seq::BioSequences.BioSequence, masks::Union{Vector{UnitRange{Int}}, Nothing} = nothing)\n\nPrepare a record for writing to a 2bit formatted file.\n\nNeeds a name, a sequence, and (optionally) masks: a vector of ranges that delineate masked regions of sequence.\n\n\n\n\n\n","category":"type"},{"location":"man/records/#","page":"TwoBit Records","title":"TwoBit Records","text":"TwoBit.Record variables support the following methods.","category":"page"},{"location":"man/records/#","page":"TwoBit Records","title":"TwoBit Records","text":"TwoBit.sequence\nTwoBit.hassequence\nTwoBit.maskedblocks","category":"page"},{"location":"man/records/#TwoBit.sequence","page":"TwoBit Records","title":"TwoBit.sequence","text":"sequence([::Type{S},] record::Record)::S\n\nGet the sequence of record as S.\n\nS can be either BioSequences.ReferenceSequence or BioSequences.DNASequence. If S is omitted, the default type is BioSequences.ReferenceSequence.\n\n\n\n\n\n","category":"function"},{"location":"man/records/#TwoBit.maskedblocks","page":"TwoBit Records","title":"TwoBit.maskedblocks","text":"maskedblocks(record::Record)::Vector{UnitRange{Int}}\n\nGet the masked blocks.\n\n\n\n\n\n","category":"function"},{"location":"#TwoBit-1","page":"Home","title":"TwoBit","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"(Image: Latest Release) (Image: MIT license)  (Image: Stable documentation) (Image: Latest documentation) (Image: Pkg Status) (Image: Chat)","category":"page"},{"location":"#Description-1","page":"Home","title":"Description","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"TwoBit.jl provides I/O and utilities for manipulating 2Bit sequence data files.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"2Bit is a binary file format designed for storing a genome consists of multiple chromosomal sequences.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The reading speed is often an order of magnitude faster than that of FASTA and the file size is smaller.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"However, since the .2bit file format is specialized for genomic sequences, it cannot store either RNA or amino acid sequences.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"For storage of sequencing read datasets, compressed and indexed on disk, head over to ReadDatastores.jl","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"TwoBit is made available to install through BioJulia's package registry.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Julia by default only watches the \"General\" package registry, so before you start, you should add the BioJulia package registry.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Start a julia terminal, hit the ] key to enter pkg mode (you should see the prompt change from julia> to pkg> ), then enter the following command:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"registry add https://github.com/BioJulia/BioJuliaRegistry.git","category":"page"},{"location":"#","page":"Home","title":"Home","text":"After you've added the registry, you can install TwoBit from the julia REPL. Press ] to enter pkg mode again, and enter the following:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"add TwoBit","category":"page"},{"location":"#","page":"Home","title":"Home","text":"If you are interested in the cutting edge of the development, please check out the master branch to try new features before release.","category":"page"},{"location":"#Testing-1","page":"Home","title":"Testing","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"TwoBit is tested against Julia 1.X on Linux, OS X, and Windows.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Latest build status:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"#Contributing-1","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"We appreciate contributions from users including reporting bugs, fixing issues, improving performance and adding new features.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Take a look at the contributing files detailed contributor and maintainer guidelines, and code of conduct.","category":"page"},{"location":"#Financial-contributions-1","page":"Home","title":"Financial contributions","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"We also welcome financial contributions in full transparency on our open collective. Anyone can file an expense. If the expense makes sense for the development of the community, it will be \"merged\" in the ledger of our open collective by the core contributors and the person who filed the expense will be reimbursed.","category":"page"},{"location":"#Backers-and-Sponsors-1","page":"Home","title":"Backers & Sponsors","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Thank you to all our backers and sponsors!","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Love our work and community? Become a backer.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: backers)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Does your company use BioJulia? Help keep BioJulia feature rich and healthy by sponsoring the project Your logo will show up here with a link to your website.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"#Questions?-1","page":"Home","title":"Questions?","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"If you have a question about contributing or using BioJulia software, come on over and chat to us on Gitter, or you can try the Bio category of the Julia discourse site.","category":"page"},{"location":"man/writing/#Writing-to-2Bit-files-1","page":"Writing files","title":"Writing to 2Bit files","text":"","category":"section"},{"location":"man/writing/#","page":"Writing files","title":"Writing files","text":"To write a 2Bit file, you have to use a TwoBit.Writer.","category":"page"},{"location":"man/writing/#","page":"Writing files","title":"Writing files","text":"TwoBit.Writer","category":"page"},{"location":"man/writing/#TwoBit.Writer","page":"Writing files","title":"TwoBit.Writer","text":"TwoBitWriter(output::IO, names::AbstractVector)\n\nCreate a data writer of the 2bit file format.\n\nArguments\n\noutput: data sink\nnames: a vector of sequence names written to output\n\n\n\n\n\n","category":"type"},{"location":"man/writing/#","page":"Writing files","title":"Writing files","text":"TwoBit.Writer wraps an IO type, and must be provided a set of names of the sequences that shall be written on construction.","category":"page"},{"location":"man/writing/#","page":"Writing files","title":"Writing files","text":"To write a sequence to 2Bit file, create a TwoBit.Record using the sequence and then use the Base.write method.","category":"page"}]
}
